{"version":3,"file":"index.mjs","sources":["../lib/base.js","../lib/dgetrans.js","../lib/main.js","../lib/ndarray.js","../lib/index.js","../b38e71bc6064acad2929fce363ed14"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isRowMajor from '@stdlib/ndarray-base-assert-is-row-major';\n\n\n// MAIN //\n\n/**\n* Converts a matrix from row-major layout to column-major layout or vice versa.\n*\n* @private\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} out - output matrix\n* @param {integer} strideO1 - stride of the first dimension of `out`\n* @param {integer} strideO2 - stride of the second dimension of `out`\n* @param {NonNegativeInteger} offsetO - starting index for `out`\n* @returns {Float64Array} `out`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var out = new Float64Array( 6 );\n*\n* out = dgetrans( 2, 3, A, 3, 1, 0, out, 2, 1, 0 );\n* // returns <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*/\nfunction dgetrans( M, N, A, strideA1, strideA2, offsetA, out, strideO1, strideO2, offsetO ) {\n\tvar isrm;\n\tvar da0;\n\tvar da1;\n\tvar do0;\n\tvar do1;\n\tvar ia;\n\tvar io;\n\tvar i0;\n\tvar i1;\n\tvar S0;\n\tvar S1;\n\n\t// Note on variable naming convention: S#, da#, do#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Perform loop interchange based on the layout format of the output matrix...\n\tisrm = isRowMajor( [ strideO1, strideO2 ] );\n\tif ( isrm ) {\n\t\t// For row-major matrices, the last dimensions have the fastest changing indices...\n\t\tS0 = M;\n\t\tS1 = N;\n\t\tda0 = strideA1;                   // offset increment for innermost loop\n\t\tda1 = strideA2 - ( S0*strideA1 ); // offset increment for outermost loop\n\t\tdo0 = strideO2;\n\t\tdo1 = strideO1 - ( S0*strideO2 );\n\t} else {\n\t\t// For column-major matrices, the first dimensions have the fastest changing indices...\n\t\tS0 = N;\n\t\tS1 = M;\n\t\tda0 = strideA2;                   // offset increment for innermost loop\n\t\tda1 = strideA1 - ( S0*strideA2 ); // offset increment for outermost loop\n\t\tdo0 = strideO1;\n\t\tdo1 = strideO2 - ( S0*strideO1 );\n\t}\n\tia = offsetA;\n\tio = offsetO;\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tout[ io ] = A[ ia ];\n\t\t\tia += da0;\n\t\t\tio += do0;\n\t\t}\n\t\tia += da1;\n\t\tio += do1;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dgetrans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isLayout from '@stdlib/blas-base-assert-is-layout';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Converts a matrix from row-major layout to column-major layout or vice versa.\n*\n* @param {string} order - storage layout\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)\n* @param {Float64Array} out - output matrix\n* @param {PositiveInteger} LDO - stride of the first dimension of `out` (a.k.a., leading dimension of the matrix `out`)\n* @throws {TypeError} first argument must be a valid order\n* @returns {Float64Array} `out`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var out = new Float64Array( 6 );\n*\n* out = dgetrans( 'row-major', 2, 3, A, 3, out, 2 );\n* // returns <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*/\nfunction dgetrans( order, M, N, A, LDA, out, LDO ) {\n\tvar sa1;\n\tvar sa2;\n\tvar so1;\n\tvar so2;\n\n\tif ( !isLayout( order ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );\n\t}\n\tif ( order === 'column-major' ) {\n\t\tsa1 = 1;\n\t\tsa2 = LDA;\n\t\tso1 = 1;\n\t\tso2 = LDO;\n\t} else { // order === 'row-major'\n\t\tsa1 = LDA;\n\t\tsa2 = 1;\n\t\tso1 = LDO;\n\t\tso2 = 1;\n\t}\n\treturn base( M, N, A, sa1, sa2, 0, out, so1, so2, 0 );\n}\n\n\n// EXPORTS //\n\nexport default dgetrans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dgetrans from './dgetrans.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dgetrans, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dgetrans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport base from './base.js';\n\n\n// MAIN //\n\n/**\n* Converts a matrix from row-major layout to column-major layout or vice versa using alternative indexing semantics.\n*\n* @param {NonNegativeInteger} M - number of rows in matrix `A`\n* @param {NonNegativeInteger} N - number of columns in matrix `A`\n* @param {Float64Array} A - input matrix\n* @param {integer} strideA1 - stride of the first dimension of `A`\n* @param {integer} strideA2 - stride of the second dimension of `A`\n* @param {NonNegativeInteger} offsetA - starting index for `A`\n* @param {Float64Array} out - output matrix\n* @param {integer} strideO1 - stride of the first dimension of `out`\n* @param {integer} strideO2 - stride of the second dimension of `out`\n* @param {NonNegativeInteger} offsetO - starting index for `out`\n* @returns {Float64Array} `out`\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var out = new Float64Array( 6 );\n*\n* out = dgetrans( 2, 3, A, 3, 1, 0, out, 2, 1, 0 );\n* // returns <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*/\nfunction dgetrans( M, N, A, strideA1, strideA2, offsetA, out, strideO1, strideO2, offsetO ) {\n\treturn base( M, N, A, strideA1, strideA2, offsetA, out, strideO1, strideO2, offsetO );\n}\n\n\n// EXPORTS //\n\nexport default dgetrans;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK routine to convert a matrix from row-major layout to column-major layout or vice versa.\n*\n* @module @stdlib/lapack-base-dge-trans\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dgetrans from '@stdlib/lapack-base-dge-trans';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var out = new Float64Array( 6 );\n*\n* out = dgetrans( 'row-major', 2, 3, A, 3, out, 2 );\n* // returns <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dgetrans from '@stdlib/lapack-base-dge-trans';\n*\n* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var out = new Float64Array( 6 );\n*\n* out = dgetrans.ndarray( 2, 3, A, 3, 1, 0, out, 2, 1, 0 );\n* // returns <Float64Array>[ 1.0, 4.0, 2.0, 5.0, 3.0, 6.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar dgetrans;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdgetrans = main;\n} else {\n\tdgetrans = tmp;\n}\n\n\n// EXPORTS //\n\nexport default dgetrans;\n","export default '/home/runner/work/lapack-base-dge-trans/lapack-base-dge-trans/lib'"],"names":["dgetrans","M","N","A","strideA1","strideA2","offsetA","out","strideO1","strideO2","offsetO","da0","da1","do0","do1","ia","io","i0","i1","S0","S1","isRowMajor","order","LDA","LDO","sa1","sa2","so1","so2","isLayout","TypeError","format","base","setReadOnly","tmp","tryRequire","join","require$$0","dgetrans$1","isError","main"],"mappings":";;mjGAsDA,SAASA,EAAUC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAASC,EAAKC,EAAUC,EAAUC,GACjF,IACIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAyBJ,IApBOC,EAAY,CAAEb,EAAUC,KAI9BW,EAAKlB,EACLS,EAAMP,EACNQ,EAAMP,GAHNc,EAAKlB,GAGiBG,EACtBS,EAAMJ,EACNK,EAAMN,EAAaW,EAAGV,IAItBW,EAAKnB,EACLU,EAAMN,EACNO,EAAMR,GAHNe,EAAKjB,GAGiBG,EACtBQ,EAAML,EACNM,EAAML,EAAaU,EAAGX,GAEvBO,EAAKT,EACLU,EAAKN,EACCQ,EAAK,EAAGA,EAAKE,EAAIF,IAAO,CAC7B,IAAMD,EAAK,EAAGA,EAAKE,EAAIF,IACtBV,EAAKS,GAAOb,EAAGY,GACfA,GAAMJ,EACNK,GAAMH,EAEPE,GAAMH,EACNI,GAAMF,CACN,CACD,OAAOP,CACR,CCjDA,SAASP,EAAUsB,EAAOrB,EAAGC,EAAGC,EAAGoB,EAAKhB,EAAKiB,GAC5C,IAAIC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,uEAAwET,IAatG,MAXe,iBAAVA,GACJG,EAAM,EACNC,EAAMH,EACNI,EAAM,EACNC,EAAMJ,IAENC,EAAMF,EACNG,EAAM,EACNC,EAAMH,EACNI,EAAM,GAEAI,EAAM/B,EAAGC,EAAGC,EAAGsB,EAAKC,EAAK,EAAGnB,EAAKoB,EAAKC,EAAK,EACnD,CC3CAK,EAAAjC,EAAA,WCwBA,SAAmBC,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAASC,EAAKC,EAAUC,EAAUC,GACjF,OAAOsB,EAAM/B,EAAGC,EAAGC,EAAGC,EAAUC,EAAUC,EAASC,EAAKC,EAAUC,EAAUC,EAC7E,ICPA,IASIwB,EAAMC,GAAYC,EATXC,EAAkBD,MChDd,oEDyDwB,gBAUvCE,EATKC,EAASL,GACFM,EAEAN"}